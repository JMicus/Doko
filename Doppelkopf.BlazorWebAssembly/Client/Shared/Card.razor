@using C = Doppelkopf.Core.App;
@using Newtonsoft.Json
@using Helper

<div class=@_class style=@($"height: {int.Parse(Layout["cardHeight"]) + (SelectionMode ? 40 : 0) + 10}px; /*padding-top: {(SelectionMode ? 40 : 0)}px; {(SelectionMode ? "margin-top: 60px" : "")}*/")>

    <div style=@_style2>

        <RadzenImage @ref=@(_image) Path=@getCardLink() Style=@(_style) @onclick=@(() =>
                                                                               {
                                                                                   onClick();
                                                                                   OnClick.InvokeAsync(CardObj);
                                                                               }) />
    </div>
</div>


@code {

    [Parameter]
    public C.Card CardObj { get; set; } = new C.Card();

    [Parameter]
    public int Rotation { get; set; } = 0;

    [Parameter]
    public bool AbsolutPosition { get; set; }

    [Parameter]
    public string Left { get; set; }

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string Top { get; set; }

    [Parameter]
    public int ZIndex { get; set; } = 0;

    [Parameter]
    public bool Hover { get; set; } = false;

    [Parameter]
    public EventCallback<C.Card> OnClick { get; set; }

    [Parameter]
    public C.Layout Layout { get; set; }

    [Parameter]
    public double RelativeSize { get; set; } = 1;

    [Parameter]
    public bool SelectionMode { get; set; } = false;

    public bool IsSelected { get; set; } = false;

    private RadzenImage _image { get; set; }

    private string _style2 { get; set; }
    private string _style { get; set; }

    private string _class = "nolift";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        createStyle();
    }

    private void createStyle()
    {
        Console.WriteLine("Card param set: Hover " + Hover);

        if (Hover)
        {
            _class = "lift";
        }

        //Console.WriteLine(JsonConvert.SerializeObject(this, Formatting.Indented));

        _style = "";
        _style2 = "";

        _style += $"position: {(AbsolutPosition ? "absolute" : "relative")};";
        _style += $"left: {Left};";
        _style += $"top: {Top};";
        _style += $"z-index: {ZIndex};";

        //if (Rotation % 2 != 0)
        //{
        //    var temp = Width;
        //    Width = Height;
        //    Height = temp;
        //}

        var cw = int.Parse(Layout["cardWidth"]);
        var ch = int.Parse(Layout["cardHeight"]);

        _style += $"width: {(string.IsNullOrEmpty(Width) ? (cw * RelativeSize) + "px;" : Width)};";
        _style += $"height: {(string.IsNullOrEmpty(Height) ? (ch * RelativeSize + (SelectionMode ? /*4*/0 : 0)) + "px;" : Height)};";



        if (Layout["cardBorder"] == "true")
        {
            _style += "border: 1px solid #000;";
            _style += "border-radius: " + (RelativeSize * ch / 15).ToDoubleString() + "px;";
        }
        else
        {
            _style += "border: none;";
            _style += "border-radius: 0px;";
        }

        if (Rotation != 0)
        {
            var r = (Rotation % 4) * 90;

            _style += $"-webkit-transform: rotate({r}deg);";
            _style += $"-moz-transform: rotate({r}deg);";
            _style += $"-ms-transform: rotate({r}deg);";
            _style += $"-o-transform: rotate({r}deg);";
            _style += $"-transform: rotate({r}deg);";
        }

        if (SelectionMode)
        {
            _style += $"margin-{(IsSelected ? "bottom" : "top")}: 40px;";
            //_style += $"padding-{(IsSelected ? "bottom" : "top")}: 40px;";
        }
    }


    private string getCardLink()
    {
        //Console.WriteLine(CardObj.ToCode());
        return "Images/Cards" + Layout["cardLayout"] + "/" + CardObj.FileName + "." + Layout["cardImageType"];
    }

    private void onClick()
    {
        if (SelectionMode)
        {
            IsSelected = !IsSelected;
            StateHasChanged();
        }
    }

    public void Refresh(C.Card card)
    {
        if (CardObj.FileName != card.FileName)
        {
            CardObj = card;
            StateHasChanged();
        }
        //Trick = new C.Trick(code);
    }

    public void Refresh(C.Layout layout)
    {
        Layout = layout;
        createStyle();
        StateHasChanged();
    }

}
