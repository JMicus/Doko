@using C = Doppelkopf.Core.App;
@using Microsoft.AspNetCore.Components

<div class="frow frow-1">

    <div class="frow frow-1" style="max-width: @((int.Parse(Layout["cardWidth"]) * (Cards.Count - 1)) + "px"); margin: auto; height: 100%">

        @for (int i = 0; i < Cards.Count; i++)
        {

            <Card @ref=@CardRef
                  CardObj=@Cards[i]
                  Layout=@Layout
                  AbsolutPosition=@true
                  Left=@((i * 100f / (Cards.Count - 1)).ToString().Replace(',', '.') + "%")
                  Top="0px"
                  ZIndex=@(100 + i)
                  Hover=@CardHover
                  SelectionMode=@SelectionMode
                  OnClick=@((C.Card c)  => OnClick.InvokeAsync(c)) />
        }

    </div>
    <div class="frow" style="width: @(Layout["cardWidth"] + "px")">

    </div>
</div>

@code {

    [Parameter]
    public List<C.Card> Cards { get; set; }

    [Parameter]
    public C.Layout Layout { get; set; }

    [Parameter]
    public EventCallback<C.Card> OnClick { get; set; }

    [Parameter]
    public bool SelectionMode { get; set; } = false;

    [Parameter]
    public bool CardHover { get; set; } = true;

    public List<C.Card> SelectedCards => _cardViews.Where(cv => cv.IsSelected).Select(cv => cv.CardObj).ToList();

    private List<Card> _cardViews = new List<Card>();

    private Card CardRef
    {
        set
        {
            _cardViews.Add(value);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Console.WriteLine("Hand param set: Hover " + CardHover);
        StateHasChanged();
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}
