@using Doppelkopf.BlazorWebAssembly.Client.Services;

@inject MenuService MenuService
@implements IDisposable 

<div class="top-row pl-4 navbar navbar-dark">
    <a id="menuTitle" class="navbar-brand" href="">Doko</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">

        @if (MenuService.InGame)
        {

            <li class="nav-item px-3" @onclick=@(() => MenuService.Click(MenuService.MenuClick.Debug))>
                <NavLink class="nav-link">
                    <NavLink class="nav-link">
                        <span class="oi oi-star" aria-hidden="true"></span> TEST
                    </NavLink>
                </NavLink>
            </li>

            <li class="nav-item px-3" @onclick=@(() => MenuService.Click(MenuService.MenuClick.Deal))>
                <NavLink class="nav-link">
                    <img src="Images/dealSymbolWhite.png" /> Karten geben
                </NavLink>
            </li>

            <li class="nav-item px-3" @onclick=@(() => MenuService.Click(MenuService.MenuClick.SpecialGame))>
                <NavLink class="nav-link">
                    <span class="oi oi-star" aria-hidden="true"></span> Sonderspiel
                </NavLink>
            </li>

            <li class="nav-item px-3" style="margin-top: 30px">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Spiel verlassen
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        MenuService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        MenuService.OnChange -= StateHasChanged;
    }
}
