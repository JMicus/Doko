@using Doppelkopf.BlazorWebAssembly.Client.Services;
@using Doppelkopf.BlazorWebAssembly.Client.Enums;

@inject MenuService MenuService
@inject StateService stateService

@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a id="menuTitle" class="navbar-brand" href="">Doko</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">

        <li class="nav-item px-3" style="margin-top: 30px; background-color: orangered">
            <a>TESTVERSION</a>
            <a class="nav-link" href="http://doko.click" target="_self">
                <span class="oi oi-loop-circular" aria-hidden="true"></span> Zur alten Version
            </a>
        </li>

        @foreach (var item in getItems())
        {
            @if (item == null)
            {
                <li style="height: 30px"></li>
            }
            else
            {


                <li class="nav-item px-3" @onclick=@(() => MenuService.Click(item.Action, !string.IsNullOrEmpty(item.Navigate)))>
                    <NavLink class="nav-link"
                             style=@(item.Action == MenuService.OpenTab ? "background-color: rgba(255,255,255,0.25);color: white;" : "")
                             href=@(string.IsNullOrEmpty(item.Navigate) ? null : stateService.CreateUrl(item.Navigate))>
                        @if (item.Image.StartsWith("oi-"))
                        {
                            <span class=@("oi " + item.Image) aria-hidden="true"></span>
                        }
                        else
                        {
                            <img src="Images/dealSymbolWhite.png" />
                        }
                        @item.Text
                    </NavLink>
                </li>
            }
        }
    </ul>
</div>

@code {
    private class Entry
    {
        internal EMenuAction Action;
        internal string Text;
        internal string Image;
        internal string Navigate;

        internal Entry(string text, string image, EMenuAction action, string navigate = null)
        {
            Text = text;
            Image = image;
            Action = action;
            Navigate = navigate;
        }

    }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private List<Entry> getItems()
    {
        var items = new List<Entry>();

        items.Add(new Entry("TEST", "oi-star", EMenuAction.Debug));

        if (stateService.InGame)
        {
            items.Add(new Entry("Zum Tisch", "oi-star", EMenuAction.PageTable, "game"));
            items.Add(new Entry("Punkte", "oi-clipboad", EMenuAction.PagePoints, "points"));
            items.Add(new Entry("Verlauf", "oi-bar-chart", EMenuAction.PageHistory, "history"));
            items.Add(new Entry("Statistiken", "oi-bar-chart", EMenuAction.PageStats, "stats"));
            items.Add(null);

            switch (MenuService.OpenTab.Value)
            {
                case EMenuAction.PageTable:
                    items.Add(new Entry("Karten geben", "dealSymbolWhite", EMenuAction.Deal));
                    items.Add(new Entry("Sonderspiel", "oi-star", EMenuAction.SpecialGame));
                    break;

                case EMenuAction.PagePoints:
                    items.Add(new Entry("Link " + (string.IsNullOrEmpty(stateService.GameState.ExternalPageUrl.Value) ? "hinzufügen" : "ändern"), "oi-external-link", EMenuAction.IncludePointsDoc));
                    break;
            }


            items.Add(new Entry("Tisch verlassen", "oi-account-logout", EMenuAction.LeaveGame));
        }
        else
        {
            //items.Add(new Entry("TEST", "oi-star", EMenuAction.Debug));

        }

        return items;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //stateService.AddChangeListener(nameof(stateService.InGame), StateHasChanged);


        stateService.InGame.OnChange += StateHasChanged;
        MenuService.OpenTab.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        Console.WriteLine("NavMenu disposed");
        MenuService.OpenTab.OnChange += StateHasChanged;
        stateService.InGame.OnChange -= StateHasChanged;
    }
}
