@using Doppelkopf.BlazorWebAssembly.Client.Services;
@using Doppelkopf.BlazorWebAssembly.Client.Enums;

@inject MenuService MenuService
@inject StateService stateService

@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a id="menuTitle" class="navbar-brand" href="">Doko</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">

        <li class="nav-item px-3" style="margin-top: 30px; background-color: orangered">
            <a>TESTVERSION</a>
            <a class="nav-link" href="http://doko.click" target="_self">
                <span class="oi oi-loop-circular" aria-hidden="true"></span> Zur alten Version
            </a>
        </li>

        @foreach (var item in getItems())
        {
            @*<li class="nav-item px-3" @onclick=@(() => MenuService.Click(MenuService.MenuClick.Debug))>
                    <NavLink class="nav-link">
                        <span class="oi oi-star" aria-hidden="true"></span> TEST
                    </NavLink>
                </li>*@

            <li class="nav-item px-3" @onclick=@(() => MenuService.Click(item.Action)) style=@(item.Space ?  "margin-top: 30px" : "")>
                <NavLink class="nav-link">
                    @if (item.Image.StartsWith("oi-"))
                    {
                        <span class=@("oi " + item.Image) aria-hidden="true"></span>
                    }
                    else
                    {
                        <img src="Images/dealSymbolWhite.png" />
                    }
                    @item.Text
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private class Entry
    {
        internal EMenuAction Action;
        internal string Text;
        internal string Image;
        internal bool Space;

        internal Entry(string text, string image, EMenuAction action, bool space = false)
        {
            Text = text;
            Image = image;
            Action = action;
            Space = space;
        }
    }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private List<Entry> getItems()
    {
        var items = new List<Entry>();

        if (stateService.InGame)
        {
            items.Add(new Entry("TEST", "oi-star", EMenuAction.Debug));
            items.Add(new Entry("Karten geben", "dealSymbolWhite", EMenuAction.Deal));
            items.Add(new Entry("Sonderspiel", "oi-star", EMenuAction.SpecialGame));
            items.Add(new Entry("Tisch verlassen", "oi-account-logout", EMenuAction.LeaveGame, true));
        }
        else
        {
            items.Add(new Entry("TEST2", "oi-star", EMenuAction.Debug));

        }

        return items;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        stateService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        Console.WriteLine("NavMenu disposed");
        stateService.OnChange -= StateHasChanged;
    }
}
